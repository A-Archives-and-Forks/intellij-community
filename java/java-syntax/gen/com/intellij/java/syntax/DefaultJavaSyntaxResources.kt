// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.java.syntax

// Generated by generateBundleMapping.kt
// To regenerate the file, please run `GenerateBundleMapping` run configuration with the following parameters: 
//   community/java/java-syntax/resources/messages/JavaSyntaxBundle.properties community/java/java-syntax/gen/com/intellij/java/syntax/DefaultJavaSyntaxResources.kt com.intellij.java.syntax 
internal object DefaultJavaSyntaxResources {
  val mappings: Map<String, String> = mapOf(
    "jdk.12.language.level.description" to "12 - No new language features",
    "jdk.23.preview.language.level.description" to "23 (Preview) - Primitive types in patterns, implicitly declared classes, etc.",
    "feature.records" to "Records",
    "filetype.class.display.name" to "Java class",
    "node.interface.tooltip" to "Interface",
    "expected.type" to "Type expected",
    "local.class.preposition" to "local",
    "unexpected.token" to "Unexpected token",
    "feature.virtual.threads" to "Virtual Threads",
    "javadoc.param.tag.parameter.name.expected" to "Parameter name expected",
    "feature.annotations" to "Annotations",
    "feature.sealed.classes" to "Sealed classes",
    "error.incompatible.type.not.convertible" to "Incompatible types: {0} is not convertible to {1}",
    "error.incompatible.type.expected.value.lambda" to "Incompatible types: expected not void but the lambda body is a block that is not value-compatible",
    "bad.return.type.in.method.reference" to "Bad return type in method reference: cannot convert {0} to {1}",
    "expected.identifier" to "Identifier expected",
    "jdk.1.6.language.level.description" to "6 - @Override in interfaces",
    "filetype.java.module.description" to "Java module",
    "command.name.insert.block.statement" to "Insert Block Statement",
    "feature.type.receivers" to "Receiver parameters",
    "jdk.22.preview.language.level.description" to "22 (Preview) - Statements before super(), string templates (2nd preview), etc.",
    "expected.pattern" to "Pattern expected",
    "error.incompatible.type" to "{0} is not compatible with {1}",
    "javadoc.value.static.field.required" to "@value tag must reference a static field",
    "jdk.19.language.level.description" to "19 - No new language features",
    "expected.comma.or.rparen" to "',' or ')' expected",
    "feature.lvti" to "Local variable type inference",
    "element.constant" to "constant field",
    "error.incompatible.type.not.a.functional.interface" to "{0} is not a functional interface",
    "expected.while" to "'while' expected",
    "javadoc.param.tag.type.parameter.gt.expected" to "'>' expected",
    "jdk.20.language.level.description" to "20 - No new language features",
    "expected.lbrace.or.semicolon" to "'{' or ';' expected",
    "feature.generics" to "Generics",
    "feature.lambda.expressions" to "Lambda expressions",
    "feature.statements.before.super" to "Statements before super()",
    "feature.primitive.types.in.patterns" to "Primitive types in patterns, instanceof and switch",
    "element.type.parameters" to "type parameters",
    "jdk.21.preview.language.level.description" to "21 (Preview) - String templates, unnamed classes and instance main methods, etc.",
    "class.literal.expected" to ".class expected",
    "jdk.23.language.level.description" to "23 - Markdown documentation comments",
    "error.inference.variable.has.incompatible.bounds" to "inference variable {0} has incompatible bounds:\n {1}: {2}\n{3}: {4}",
    "expected.identifier.or.semicolon" to "Identifier or ';' expected",
    "expected.lbracket" to "'[' expected",
    "bad.return.type.in.lambda.expression1" to "Bad return type in lambda expression: {0} cannot be converted to void",
    "expected.gt.or.comma" to "'>' or ',' expected",
    "jdk.1.3.language.level.description" to "1.3 - Plain old Java",
    "feature.local.enums" to "Local enums",
    "expected.catch.or.finally" to "'catch' or 'finally' expected",
    "element.class" to "class",
    "error.incompatible.type.incompatible.parameter.types.in.method.reference" to "Incompatible parameter types in method reference expression",
    "element.local_variable" to "local variable",
    "jdk.24.preview.language.level.description" to "24 (Preview) - Flexible constructor bodies, simple source files, etc.",
    "element.snippet_body" to "snippet body",
    "jdk.1.9.language.level.description" to "9 - Modules, private methods in interfaces, etc.",
    "node.junit.test.tooltip" to "JUnit Test",
    "error.incompatible.type.declaration.for.the.method.reference.not.found" to "No compile-time declaration for the method reference is found",
    "element.record_header" to "record header",
    "annotation.target.PACKAGE" to "package",
    "diamond.error.anonymous.inner.classes" to "Cannot use '<>' with anonymous inner classes",
    "jdk.24.language.level.description" to "24 - Stream gatherers",
    "conflicting.conjuncts" to "{0} and {1}",
    "feature.hex.fp.literals" to "Hexadecimal floating point literals",
    "feature.unnamed.vars" to "Unnamed patterns and variables",
    "feature.implicit.classes" to "Implicitly declared classes",
    "expected.boolean.expression" to "Boolean expression expected",
    "node.annotation.tooltip" to "Annotation",
    "expected.identifier.or.type" to "Identifier or type expected",
    "finally.without.try" to "'finally' without 'try'",
    "feature.extension.methods" to "Extension methods",
    "expected.value" to "Value expected",
    "expected.with" to "'with' expected",
    "element.annotation" to "annotation",
    "expected.eq" to "'=' expected",
    "feature.binary.literals" to "Binary literals",
    "error.incompatible.type.incompatible.types.expected.void.lambda" to "Incompatible types: expected void but the lambda body is neither a statement expression nor a void-compatible block",
    "error.incompatible.type.incompatible.types.expected.not.void.got.void.method.reference" to "Incompatible types: expected not void but compile-time declaration for the method reference has void return type",
    "import.statement.identifier.or.asterisk.expected." to "Identifier or '*' expected",
    "expected.lt.or.lparen" to "'<' or '(' expected",
    "jdk.11.language.level.description" to "11 - Local variable syntax for lambda parameters",
    "element.interface" to "interface",
    "unexpected.identifier" to "Unexpected identifier",
    "feature.string.switch" to "Strings in 'switch' statements",
    "feature.try.with.resources.refs" to "Resource references",
    "feature.string.templates" to "String templates",
    "0.is.not.an.identifier" to "''{0}'' is not an identifier.",
    "feature.classfile.api" to "ClassFile API",
    "expected.array.initializer" to "Array initializer expected",
    "expected.module.statement" to "Module directive expected",
    "feature.stream.and.optional.api" to "Stream and Optional API",
    "error.incompatible.type.bad.lambda.return.type" to "Bad return type in lambda expression: {0} cannot be converted to {1}",
    "bound.not.expected" to "Unexpected bound",
    "expected.lparen" to "'(' expected",
    "element.abstract_method" to "abstract method",
    "missing.return.value.lambda" to "Missing return value",
    "jdk.unsupported.preview.language.level.description" to "{0} (Preview) - Unsupported",
    "context.type.java.comment" to "Comment",
    "error.message.wildcard.not.expected" to "Unexpected wildcard",
    "feature.record.patterns.in.for.each" to "Record patterns in for-each loops",
    "feature.patterns.instanceof" to "Patterns in 'instanceof'",
    "javadoc.param.tag.type.parameter.name.expected" to "Type parameter name expected",
    "expected.gt" to "'>' expected.",
    "expected.colon.or.arrow" to "':' or '->' expected",
    "catch.without.try" to "'catch' without 'try'",
    "psi.error.attempt.to.edit.class.file" to "Cannot modify compiled element in file ''{0}''",
    "expected.dot" to "'.' expected",
    "jdk.22.language.level.description" to "22 - Unnamed variables and patterns",
    "annotation.target.METHOD" to "method",
    "node.anonymous.class.tooltip" to "Anonymous Class",
    "expected.string" to "String literal expected",
    "expected.rbracket" to "']' expected",
    "feature.repeating.annotations" to "Repeating annotations",
    "feature.static.imports" to "Static imports",
    "node.record.tooltip" to "Record",
    "expected.lbrace" to "'{' expected",
    "filetype.java.description" to "Java",
    "element.statement" to "statement",
    "annotation.target.PARAMETER" to "parameter",
    "jdk.10.language.level.description" to "10 - Local variable type inference",
    "jdk.21.language.level.description" to "21 - Record patterns, pattern matching for switch",
    "element.unknown" to "element",
    "expected.rbrace" to "'}' expected",
    "expected.comma.or.semicolon" to "',' or ';' expected",
    "feature.collection.factories" to "Collection factory methods",
    "element.type.semicolon" to "semicolon",
    "annotation.target.FIELD" to "field",
    "expected.template.fragment" to "Template fragment expected",
    "element.variable" to "variable",
    "element.type.parameter" to "type parameter",
    "feature.enhanced.switch" to "Enhanced 'switch' blocks",
    "node.exception.tooltip" to "Exception",
    "feature.valhalla.value.classes" to "Valhalla value classes",
    "annotation.target.MODULE" to "module",
    "feature.package.import.shadow.module.import" to "Import-on-demand over module import",
    "annotation.name.is.missing" to "Annotation attribute of the form 'name=value' expected",
    "element.enum_constant" to "enum constant",
    "feature.underscores.in.literals" to "Underscores in literals",
    "feature.sequenced.collections" to "Sequenced Collections",
    "anonymous.class.context.display" to "Anonymous in {0}",
    "javadoc.ref.tag.class.ref.expected" to "Class reference expected",
    "type.conforms.to.constraint" to "{0} conforms to {1}",
    "node.method.tooltip" to "Method",
    "element.field" to "field",
    "node.enum.tooltip" to "Enum",
    "class.file.version" to "ver. {0}",
    "feature.override.interface" to "@Override in interfaces",
    "feature.var.lambda.parameter" to "'var' in lambda parameters",
    "feature.foreign.functions" to "Foreign Function & Memory API",
    "default.language.level.description" to "SDK default",
    "java.terms.anonymous.class.base.ref" to "anonymous {0}",
    "expected.rparen" to "')' expected",
    "feature.strictfp" to "Always-strict floating point semantics",
    "error.type.parameter.has.incompatible.upper.bounds" to "Type parameter {0} has incompatible upper bounds: {1}",
    "annotation.target.TYPE_USE" to "type use",
    "expected.parameter" to "Parameter expected",
    "feature.objects.class" to "java.util.Objects API",
    "feature.private.interface.methods" to "Private interface methods",
    "jdk.14.language.level.description" to "14 - Switch expressions",
    "expected.case.label.element" to "Expression, pattern, 'default' or 'null' expected",
    "feature.structured.concurrency" to "Structured Concurrency",
    "element.permits.list" to "permits list",
    "element.type.arguments" to "type arguments",
    "feature.effectively.final" to "Effectively final variables",
    "expected.comma" to "',' expected",
    "error.incompatible.type.return.type.is.not.yet.inferred" to "Return type is not yet inferred: {0}",
    "annotation.target.RECORD_COMPONENT" to "record component",
    "javadoc.value.tag.jdk15.required" to "@value tag may not have any arguments when JDK 1.4 or earlier is used",
    "element.extends.list" to "extends list",
    "expected.class.or.interface" to "'class' or 'interface' expected",
    "element.throws.list" to "throws list",
    "expected.module.declaration" to "Module declaration expected",
    "error.incompatible.upper.bounds" to "Incompatible upper bounds: {0}",
    "jdk.1.8.language.level.description" to "8 - Lambdas, type annotations, etc.",
    "element.record_component" to "record component",
    "node.final.flag.tooltip" to "Final",
    "expected.semicolon" to "';' expected",
    "feature.multi.catch" to "Multi-catches",
    "expected.package.reference" to "Package reference expected",
    "javadoc.value.field.with.initializer.required" to "@value tag must reference a field with a constant initializer",
    "element.anonymous_class" to "anonymous class",
    "error.incompatible.type.parameter.type.is.not.yet.inferred" to "Parameter type is not yet inferred: {0}",
    "feature.serial.annotation" to "@Serial annotation",
    "error.incompatible.type.no.valid.function.type.found" to "No valid function type can be found for {0}",
    "feature.enum.qualified.name.in.switch" to "Qualified enum as a constant in switch",
    "error.incompatible.type.failed.to.resolve.argument" to "Failed to resolve argument",
    "jdk.17.language.level.description" to "17 - Sealed types, always-strict floating-point semantics",
    "feature.enums" to "Enums",
    "element.method.call" to "method call",
    "feature.markdown.comment" to "Markdown Documentation Comments",
    "diamond.error.cannot.infer.type.arguments" to "Cannot infer type arguments for {0}",
    "method.context.display" to "{0}() in {1}",
    "feature.try.with.resources" to "Try-with-resources",
    "feature.static.interface.calls" to "Static interface method calls",
    "enum.constant.context" to "Enum constant ''{0}'' in ''{1}''",
    "filetype.jshell.description" to "JShell snippet",
    "list.item.no.module" to "<no module>",
    "feature.varargs" to "Variable arity methods",
    "element.constructor" to "constructor",
    "element.label" to "label",
    "expected.class.reference" to "Class reference expected",
    "feature.local.interfaces" to "Local interfaces",
    "feature.method.references" to "Method references",
    "element.expression" to "expression",
    "unexpected.tokens" to "Unexpected tokens",
    "type.can.be.converted" to "{0} can be converted to {1}",
    "feature.type.annotations" to "Type annotations",
    "feature.stream.gatherers" to "Stream Gatherers",
    "feature.package.transitive.dependency.on.java.base" to "Transitive dependency on java.base module",
    "node.field.tooltip" to "Field",
    "feature.modules" to "Modules",
    "feature.javadoc.snippets" to "@snippet in Javadoc",
    "feature.implicit.import.in.implicit.classes" to "Implicit import in implicitly declared classes",
    "javadoc.exception.tag.class.is.not.throwable" to "Class {0} is not a descendant of Throwable",
    "jdk.1.4.language.level.description" to "1.4 - 'assert' keyword",
    "feature.instance.main.method" to "Instance main method",
    "element.initializer" to "initializer",
    "feature.text.blocks" to "Text block literals",
    "expected.type.parameter" to "Type parameter expected",
    "diamond.error.cannot.infer.arguments.unable.to.resolve.constructor" to "Cannot infer arguments (unable to resolve constructor)",
    "error.incompatible.type.no.type.variable" to "no instance(s) of type variable(s) exist so that {0}",
    "error.incompatible.type.expected.non.void.got.void.method.reference" to "Incompatible types: expected not void but compile-time declaration for the method reference has void return type",
    "annotation.target.ANNOTATION_TYPE" to "annotation type",
    "expected.resource" to "Resource definition expected",
    "jdk.18.language.level.description" to "18 - JavaDoc snippets",
    "node.static.flag.tooltip" to "Static",
    "expected.expression" to "Expression expected",
    "jdk.13.language.level.description" to "13 - No new language features",
    "expected.switch.rule" to "Expression, block or throw statement expected",
    "jdk.X.language.level.description" to "X - Experimental features",
    "feature.advanced.collection.api" to "Lambda methods in collections",
    "expected.switch.label" to "'case', 'default' or '}' expected",
    "feature.with.initial" to "ThreadLocal.withInitial()",
    "feature.diamond.types" to "Diamond types",
    "diamond.error.cannot.infer.arguments" to "Cannot infer arguments",
    "feature.utf8.property.files" to "Property files in UTF-8 encoding",
    "element.kind.and.name" to "{0} {1}",
    "jdk.1.7.language.level.description" to "7 - Diamonds, ARM, multi-catch, etc.",
    "node.runnable.class.tooltip" to "Runnable Class",
    "annotation.target.TYPE" to "type",
    "unexpected.return.value" to "Unexpected return value",
    "feature.no.this.capture" to "Inner classes don't capture 'this'",
    "annotation.target.CONSTRUCTOR" to "constructor",
    "feature.switch.expressions" to "'switch' expressions",
    "class.context.display" to "{0} in {1}",
    "expected.parameter.or.rparen" to "Annotation attribute or ')' expected",
    "feature.module.import.declarations" to "Module Import Declarations",
    "feature.inner.statics" to "Static declarations in inner classes",
    "feature.inherited.static.main.method" to "Inherited static main method",
    "diamond.error.anonymous.inner.classes.non.private" to "Cannot use '<>' due to non-private method which doesn't override or implement a method from a supertype",
    "expected.colon" to "':' expected",
    "node.class.tooltip" to "Class",
    "element.receiver.parameter" to "receiver parameter",
    "jdk.1.5.language.level.description" to "5 - 'enum' keyword, generics, autoboxing, etc.",
    "feature.pattern.guard.and.record.patterns" to "Pattern guards and record patterns",
    "element.pattern_variable" to "pattern variable",
    "lambda.body.must.be.a.statement.expression" to "Lambda body must be a statement expression",
    "feature.patterns.in.switch" to "Patterns in switch",
    "feature.nestmates" to "Nest-based access control",
    "element.enum" to "enum",
    "expected.statement" to "Statement expected",
    "annotation.target.TYPE_PARAMETER" to "type parameter",
    "element.package.statement" to "package statement",
    "annotation.target.LOCAL_VARIABLE" to "local variable",
    "feature.scoped.values" to "Scoped Values",
    "feature.intersections.in.casts" to "Intersection types in casts",
    "element.package" to "package",
    "feature.assertions" to "Assertions",
    "diamond.error.explicit.type.parameters.for.constructor" to "Cannot use diamonds with explicit type parameters for constructor",
    "element.module" to "module",
    "element.record" to "record",
    "feature.for.each" to "For-each loops",
    "javadoc.value.field.required" to "@value tag must reference a field",
    "element.parameter" to "parameter",
    "implicit.class.context.display" to "Implicit class",
    "error.incompatible.type.incompatible.parameter.types.in.lambda" to "Wrong number of lambda parameters: expected {0} but found {1}",
    "jdk.15.language.level.description" to "15 - Text blocks",
    "element.method" to "method",
    "jdk.16.language.level.description" to "16 - Records, patterns, local enums and interfaces",
    "context.type.string" to "String",
    "else.without.if" to "'else' without 'if'",
    "javadoc.exception.tag.exception.is.not.thrown" to "{0} is not declared to be thrown by method {1}",
    "anonymous.class.derived.display" to "Anonymous class derived from {0}",
    "feature.text.block.escape.sequences" to "'\\s' escape sequences",
    "node.abstract.flag.tooltip" to "Abstract",
    "error.incompatible.type.incompatible.equality.constraint" to "Incompatible equality constraint: {0} and {1}",
    "javadoc.exception.tag.wrong.tag.value" to "Wrong tag value",
    "bad.return.type.in.lambda.expression" to "Bad return type in lambda expression: {0} cannot be converted to {1}",
    "task.background.title.maven" to "Maven",
    "filetype.class.description" to "Java class",
    "filetype.java.module.display.name" to "Java module",
    "feature.auto.root.modules" to "All API-exporting modules are implicitly root modules",
    "expected.lparen.or.lbracket" to "'(' or '[' expected",
    "error.incompatible.type.unhandled.exception" to "Unhandled exception: {0}",
    "error.incompatible.type.no.type.variable.0" to "no instance(s) of type variable(s) {0} exist so that {1}",
    "aux.context.display" to "of {0}",
  )
}
